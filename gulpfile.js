const del = require('del');
const gulp = require('gulp');
const concat = require('gulp-concat');
const uglify = require('gulp-uglify');
const autoprefixer = require('gulp-autoprefixer');
const htmlmin = require('gulp-htmlmin');
const cleanCSS = require('gulp-clean-css');
const imagemin = import('gulp-imagemin');
const gulpif = require('gulp-if');
const filter = require('gulp-filter');
const jeditor = require("gulp-json-editor");
const zip = require('gulp-zip');
const manifest = require('./src/manifest.json');

const paths = {
    src: './src/',
    dist: './dist/',
    cssDir: './src/assets/css/',
};

/**
 * Build process:
 * 1. Remove unnecessary files (e.g. blocked.html)
 * 2. Concat files
 * 3. Minify everything (js, css, html)
 * 4. Optimize images
 * 5. Replace things (path to files, etc.)
 * 6. Update manifest to match
 * 7. Zip files
 */

gulp.task('cleanup', function () {
    return del(paths.dist);
});

function packJS(src, dist, concatName) {
    return gulp.src(
        Array.isArray(src)
            ? src.map((path) => paths.src + path)
            : paths.src + src
    )
        .pipe(gulpif(!!concatName, concat(concatName || '404')))
        .pipe(uglify())
        .pipe(gulp.dest(paths.dist + dist));
}

gulp.task('pack-js', async function () {
    packJS(
        [
            'scripts/events.js',
            'scripts/tabs.js',
            'scripts/utils.js',
            'scripts/alarm.js'
        ],
        '', 'background.js'
    );

    packJS(
        [
            "content.js",
            "scripts/utils.js",
            "scripts/timer.js",
            "scripts/screen-blocker.js"
        ],
        'scripts'
    );

    packJS('options/options.js', 'options');
    packJS('popup/popup.js', 'popup');
});

gulp.task('pack-css', function () {
    return gulp.src(paths.src + 'assets/css/*.css')
        .pipe(cleanCSS())
        .pipe(autoprefixer())
        .pipe(gulp.dest(paths.dist + 'assets/css'));
});

gulp.task('pack-html', function () {
    return gulp.src(paths.src + "**/*.html")
        .pipe(htmlmin({
            collapseWhitespace: true,
            includeAutoGeneratedTags: false,
            minifyCSS: true,
            minifyJS: true,
            minifyURLs: true,
            removeComments: true,
            removeEmptyAttributes: true,
            removeAttributeQuotes: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true
        }))
        .pipe(gulp.dest(paths.dist));
});

gulp.task('optimize-images', async function () {
    const imageOptimizer = await imagemin;

    return gulp.src(paths.src + "/assets/images/*")
        .pipe(
            imageOptimizer.default([
                imageOptimizer.optipng({ optimizationLevel: 7 }),
                imageOptimizer.svgo()
            ])
        )
        .pipe(gulp.dest(paths.dist + "/assets/images"));
});

gulp.task('default', gulp.series([
    'cleanup',
    gulp.parallel(['pack-js', 'pack-css', 'pack-html', 'optimize-images']),

]));
